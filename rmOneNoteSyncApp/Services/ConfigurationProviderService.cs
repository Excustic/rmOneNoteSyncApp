using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using rmOneNoteSyncApp.Services.Interfaces;

namespace rmOneNoteSyncApp.Services;

public class ConfigurationProviderService(
    ILogger<ConfigurationProviderService> logger,
    IDatabaseService databaseService,
    ISshService sshService)
    : IConfigurationProviderService
{
    private const int ServerPort = 8080;

    public async Task<string> GetConfigurationJsonAsync(string deviceId)
    {
        var config = await databaseService.GetConfigurationAsync();
        
        // Get the host IP address that's accessible from the reMarkable
        var hostIp = GetHostIpAddress();
        
        // Build configuration for the device
        var deviceConfig = new
        {
            server_url = $"http://{hostIp}:{ServerPort}/upload",
            api_key = "rmOneNoteSync-" + Guid.NewGuid().ToString("N").Substring(0, 16),
            shared_path = "*", // Legacy field, kept for compatibility
            whitelist_ids = config?.SyncFiles ?? [], // New field with file IDs
            upload_interval_seconds = config?.SyncIntervalMinutes * 60 ?? 1800,
            max_retries = config?.MaxRetries ?? 5,
            retry_delay_seconds = config?.RetryDelaySeconds ?? 20,
            timeout_seconds = 10,
            device_id = deviceId,
            timestamp = DateTime.UtcNow.ToString("O"),
            version = "2.0" // Version 2 uses whitelist instead of path filtering
        };
        
        return JsonSerializer.Serialize(deviceConfig, new JsonSerializerOptions
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
    }
    
    public async Task<bool> UpdateDeviceConfigurationAsync()
    {
        if (!sshService.IsConnected)
        {
            logger.LogWarning("Cannot update reMarkable configuration - not connected");
            return false;
        }
        
        try
        {
            // Step 1: Get the correct IP address for communication
            var hostIp = GetHostIpAddress();
            logger.LogInformation("Using host IP: {IP} for reMarkable communication", hostIp);
            
            // Step 2: Get the whitelist of document IDs from database
            var config = await databaseService.GetConfigurationAsync();
            var syncFileIds = config?.SyncFiles ?? new List<string>();
            
            logger.LogInformation("Updating reMarkable with {Count} document IDs to sync", syncFileIds.Count);
            
            // Step 3: Build the httpclient.conf content
            var configBuilder = new StringBuilder();
            configBuilder.AppendLine("# Auto-generated by rmOneNoteSyncApp");
            configBuilder.AppendLine($"# Generated at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            configBuilder.AppendLine();
            configBuilder.AppendLine("# Server Configuration");
            configBuilder.AppendLine($"SERVER_URL=http://{hostIp}:{ServerPort}/upload");
            configBuilder.AppendLine("API_KEY=rmOneNoteSync");
            configBuilder.AppendLine();
            configBuilder.AppendLine("# Upload Settings");
            configBuilder.AppendLine("UPLOAD_INTERVAL=30");
            configBuilder.AppendLine("MAX_RETRIES=5");
            configBuilder.AppendLine("RETRY_DELAY=20");
            configBuilder.AppendLine("TIMEOUT=10");
            configBuilder.AppendLine();
            configBuilder.AppendLine("# Document Whitelist");
            configBuilder.AppendLine($"WHITELIST_COUNT={syncFileIds.Count}");
            
            // Add each document ID to the whitelist
            for (int i = 0; i < syncFileIds.Count; i++)
            {
                configBuilder.AppendLine($"WHITELIST_{i}={syncFileIds[i]}");
            }
            
            // Step 4: Write the configuration to the reMarkable
            var configPath = "/home/root/onenote-sync/httpclient.conf";
            var tempPath = "/tmp/httpclient.conf.tmp";
            
            // First write to temp file to avoid corruption
            var command = $"""
                           cat > {tempPath} << 'EOF'
                           {configBuilder}
                           EOF
                           """;
            
            await sshService.ExecuteCommandAsync(command);
            
            // Verify the file was written correctly
            var verification = await sshService.ExecuteCommandAsync($"wc -l {tempPath}");
            logger.LogInformation("Config file written, lines: {Lines}", verification);
            
            // Move temp file to actual location
            await sshService.ExecuteCommandAsync($"mv {tempPath} {configPath}");
            
            // Step 5: Restart the service to apply new configuration
            logger.LogInformation("Restarting httpclient service to apply new configuration");
            await sshService.ExecuteCommandAsync("systemctl restart onenote-sync-httpclient");
            
            // Give service time to restart
            await Task.Delay(2000);
            
            // Verify service is running
            var serviceStatus = await sshService.ExecuteCommandAsync("systemctl is-active onenote-sync-httpclient");
            if (serviceStatus.Trim() == "active")
            {
                logger.LogInformation("✅ Configuration updated successfully! reMarkable will send files to {IP}:{Port}", 
                    hostIp, ServerPort);
                return true;
            }
            else
            {
                logger.LogWarning("⚠️ Service may not have started correctly. Status: {Status}", serviceStatus);
                return false;
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Failed to update reMarkable configuration");
            return false;
        }
    }
    
    public string GetHostIpAddress()
    {
        try
        {
            // Find the IP address on the same subnet as the reMarkable
            // The reMarkable is typically at 10.11.99.1, so we need our 10.11.99.x address
            var interfaces = NetworkInterface.GetAllNetworkInterfaces()
                .Where(i => i.OperationalStatus == OperationalStatus.Up &&
                           i.NetworkInterfaceType != NetworkInterfaceType.Loopback);
            
            foreach (var iface in interfaces)
            {
                var props = iface.GetIPProperties();
                foreach (var addr in props.UnicastAddresses)
                {
                    if (addr.Address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        var ip = addr.Address.ToString();
                        // Check if it's in the reMarkable subnet
                        if (!ip.StartsWith("10.11.99.")) continue;
                        logger.LogInformation("Found host IP for reMarkable communication: {IP}", ip);
                        return ip;
                    }
                }
            }
            
            // Fallback to any local IP
            var localIp = Dns.GetHostEntry(Dns.GetHostName())
                .AddressList
                .FirstOrDefault(ip => ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                ?.ToString() ?? "127.0.0.1";
            
            logger.LogWarning("Could not find IP in reMarkable subnet, using {IP}", localIp);
            return localIp;
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Failed to determine host IP address");
            return "127.0.0.1";
        }
    }
    
    public int GetServerPort() => ServerPort;
}